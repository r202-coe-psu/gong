__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1711862011570, "gongs.sensor_infos": [".py", "HTML_SENSOR_NAMES=dict(\npm_0_1=\"PM<sub>0.1</sub>\",\npm_2_5=\"PM<sub>2.5</sub>\",\npm_1=\"PM<sub>1</sub>\",\npm_1_0=\"PM<sub>1</sub>\",\npm_10=\"PM<sub>10</sub>\",\npm_100=\"PM<sub>100</sub>\",\ntemperature=\"Temperture\",\nhumidity=\"Humidity\",\nvoc=\"VOC\",\nco=\"CO\",\nco2=\"CO<sub>2</sub>\",\nso2=\"SO<sub>2</sub>\",\no3=\"O<sub>3</sub>\",\nno2=\"NO<sub>2</sub>\",\nwind_speed=\"Wind Speed\",\nwind_direction=\"Wind Direction\",\nrain=\"Rain\",\npressure=\"Pressure\",\ndew_point=\"Dew Point\",\nvisible=\"Visible\",\n)\n\nHTML_SENSOR_UNITS=dict(\npm_0_1=\"\u03bcg/m<sup>3</sup>\",\npm_2_5=\"\u03bcg/m<sup>3</sup>\",\npm_100=\"\u03bcg/m<sup>3</sup>\",\npm_10=\"\u03bcg/m<sup>3</sup>\",\npm_1_0=\"\u03bcg/m<sup>3</sup>\",\npm_1=\"\u03bcg/m<sup>3</sup>\",\nwind_speed=\"knots\",\nhumidity=\"%\",\nwind_direction=\"&deg;\",\ntemperature=\"&deg;C\",\ndew_point=\"&deg;C\",\nvisible=\"km\",\npressure=\"mmHg\",\nrain=\"mm\",\nvoc=\"ppb\",\nco=\"ppm\",\nco2=\"ppm\",\nso2=\"ppb\",\no3=\"ppb\",\nno2=\"ppb\",\n)\n", []], "gongs": [".py", "import datetime\n\nfrom . import sensor_colors\nfrom . import sensor_infos\n\n\nclass Sensor:\n def __init__(self,id=None ,type=\"unknow\",value=0,unit=\"unit\"):\n  self.id=id\n  self.value=value\n  self.type=type.lower()\n  self.last_update=None\n  self.data=dict(hourly=[],daily=[])\n  self.unit=unit\n  \n async def update(self,every,data):\n  self.data[every]=[[d[\"timestamp\"],d[\"value\"]]for d in data[\"climates\"]]\n  \n  \nclass Station:\n def __init__(self):\n  self.name=\"\"\n  self.source=\"\"\n  self.sensors=dict()\n  self.location=\"\"\n  self.coordinate=[0,0]\n  self.device_id=\"\"\n  self.status=False\n  self.last_update=None\n  self.model=\"\"\n  self.operator=\"\"\n  self.contributor=\"\"\n  self.contributor_url=\"\"\n  self.logo_url=\"\"\n  self.id=\"\"\n  \n async def update(self,data):\n  self.id=data.get(\"id\",self.id)\n  self.source=data.get(\"source\",self.source)\n  self.coordinate=data.get(\"coordinate\",self.coordinate)\n  self.location=data.get(\"location\",self.location)\n  self.station=data.get(\"station\",self.location)\n  self.device_id=data.get(\"device_id\",self.device_id)\n  self.name=data.get(\"name\",self.name)\n  self.model=data.get(\"model\",self.model)\n  self.operator=data.get(\"operator\",self.operator)\n  self.contributor=data.get(\"contributor\",self.contributor)\n  self.contributor_url=data.get(\"contributor_url\",self.contributor_url)\n  self.logo_url=data.get(\"logo_url\",self.logo_url)\n  \n  last_update=data.get(\"last_update\",self.last_update)\n  \n  device_status=data.get(\"device_status\",{})\n  if device_status:\n   self.status=device_status.get(\"status\",self.status)\n   last_update=device_status.get(\"last_update\",last_update)\n   \n  if type(last_update)==datetime.datetime:\n   self.last_update=last_update\n  elif last_update and type(last_update)==str and last_update !=\"Unknow\":\n   self.last_update=datetime.datetime.fromisoformat(last_update)\n   \n  sensors=data.get(\"sensors\",{})\n  for type_,value in sensors.items():\n   type_=type_.lower()\n   sensor=self.sensors.get(type_,Sensor(type=type_,value=value))\n   if type_ not in self.sensors:\n    self.sensors[type_]=sensor\n    \n async def update_sensors(self,sensors):\n  for sensor in sensors:\n   key=sensor.get(\"name\",sensor.get(\"type\")).lower()\n   if key not in self.sensors:\n    self.sensors[key]=Sensor(type=key,value=sensor.get(\"value\"))\n   self.sensors[key].value=sensor[\"value\"]\n", ["datetime", "gongs"], 1], "gongs.sensor_colors": [".py", "class SensorColor:\n def __init__(self,type_=\"default\"):\n  self.type=type_\n  self.color_ranks=[\n  (0,15,\"#00BFFF\"),\n  (15,25,\"#01DF3A\"),\n  (25,37.5,\"#FFE319\"),\n  (37.5,75,\"#FF8000\"),\n  (75,1_000_000,\"#FF0000\"),\n  ]\n  \n def get_color(self,value):\n  for min_value,max_value,color in self.color_ranks:\n   if min_value <=value <=max_value:\n    return color\n  return \"#808080\"\n  \n  \nclass PM01Color(SensorColor):\n def __init__(self):\n  super().__init__(\"pm_0_1\")\n  \n  \nclass PM1Color(SensorColor):\n def __init__(self):\n  super().__init__(\"pm_1\")\n  \n  \nclass PM25Color(SensorColor):\n def __init__(self):\n  super().__init__(\"pm_2_5\")\n  \n  \nclass WindSpeedColor(SensorColor):\n def __init__(self):\n  super().__init__(\"wind_speed\")\n  \n  \nclass PM10Color(SensorColor):\n def __init__(self,type_=\"pm_10\"):\n  super().__init__(type_)\n  \n  self.color_ranks=[\n  (0,50,\"#00BFFF\"),\n  (50,80,\"#01DF3A\"),\n  (80,120,\"#FFE319\"),\n  (120,180,\"#FF8000\"),\n  (180,1_000_000,\"#FF0000\"),\n  ]\n  \n  \nclass PM100Color(PM10Color):\n def __init__(self):\n  super().__init__(\"pm_100\")\n  \n  \nclass TemperatureColor(SensorColor):\n def __init__(self):\n  super().__init__(\"temperature\")\n  \n  self.color_ranks=[\n  (0,15,\"#FE2EF7\"),\n  (15,20,\"#8904B1\"),\n  (20,25,\"#0040FF\"),\n  (25,30,\"#00BFFF\"),\n  (30,35,\"#FFE319\"),\n  (35,40,\"#FF8000\"),\n  (40,1_000_000,\"#FF0000\"),\n  ]\n  \n  \nclass HumidityColor(SensorColor):\n def __init__(self):\n  super().__init__(\"humidity\")\n  \n  self.color_ranks=[\n  (0,30,\"#FE2EF7\"),\n  (30,60,\"#53B06E\"),\n  (60,90,\"#1CD2C7\"),\n  (90,1_000_000,\"#000080\"),\n  ]\n  \n  \nclass VOCColor(SensorColor):\n def __init__(self):\n  super().__init__(\"voc\")\n  \n  self.color_ranks=[\n  (0,66,\"#00BFFF\"),\n  (66,221,\"#01DF3A\"),\n  (221,661,\"#FFE319\"),\n  (661,2201,\"#FF8000\"),\n  (2201,1_000_000,\"#FF0000\"),\n  ]\n  \n  \nclass CO2Color(SensorColor):\n def __init__(self):\n  super().__init__(\"co2\")\n  \n  self.color_ranks=[\n  (0,601,\"#00BFFF\"),\n  (601,1001,\"#01DF3A\"),\n  (1001,1501,\"#FFE319\"),\n  (1501,2001,\"#FF8000\"),\n  (2001,1_000_000,\"#FF0000\"),\n  ]\n  \n  \nSENSOR_COLORS=[\nPM01Color(),\nPM25Color(),\nPM10Color(),\nPM100Color(),\nTemperatureColor(),\nHumidityColor(),\nVOCColor(),\nCO2Color(),\n]\n\n\ndef get_sensor_color_rank(type_):\n type_=type_.lower()\n for sensor_color in SENSOR_COLORS:\n  if type_ ==sensor_color.type:\n   return sensor_color.color_ranks\n   \n return []\n \n \ndef get_sensor_color(type_,value):\n type_=type_.lower()\n for sensor_color in SENSOR_COLORS:\n  if type_ ==sensor_color.type:\n   return sensor_color.get_color(value)\n   \n grey=\"#808080\"\n return grey\n", []]}
__BRYTHON__.update_VFS(scripts)
