__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1711863133419, "controllers": [".py", "from .main import MainController\n", ["controllers.main"], 1], "controllers.main": [".py", "import datetime\nfrom browser import ajax,document,html,window,timer,aio\nimport javascript as js\nfrom maps import MainMap\nfrom stations import Station\n\n\nclass MainController:\n def __init__(self,lang_code):\n  self.lang_code=lang_code\n  self.acquisition_interval=60 *60\n  \n  self.running=False\n  \n  self.started_datetime=\"\"\n  self.ended_datetime=\"\"\n  \n  self.get_token_url=f\"/{lang_code}/get_token\"\n  self.get_system_setting_url=f\"{api_url}/v1/system_settings\"\n  \n  \n  \n  \n  \n  \n  self.get_station_latest_climate_url=f\"{api_url}/v1/stations/climates/latest\"\n  self.get_latest_hotspot_url=f\"{api_url}/v1/hotspots/latest\"\n  self.get_kriging_summary_url=(\n  f\"{api_url}/v1/interpolations/kriging/interpolate\"\n  )\n  \n  self.stations=dict()\n  self.map=None\n  \n  \n  \n  \n  \n async def get_api_data(self,url,params):\n  headers={\"Authorization\":f\"Bearer {self.token}\"}\n  response=await aio.get(url,headers=headers,data=params)\n  stations=js.JSON.parse(response.data)\n  return stations\n  \n async def monitor(self):\n  pass\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n async def setup(self):\n  response=await aio.get(self.get_token_url)\n  response=js.JSON.parse(response.data)\n  self.token=response[\"access_token\"]\n  \n  headers={\"Authorization\":f\"Bearer {self.token}\"}\n  response=await aio.get(self.get_system_setting_url,headers=headers)\n  self.system_setting=js.JSON.parse(response.data)\n  \n  center=self.system_setting[\"center\"][\"coordinates\"]\n  zoom=self.system_setting[\"zoom\"]\n  min_zoom=self.system_setting[\"min_zoom\"]\n  \n  self.map=MainMap([center[1],center[0]],zoom,min_zoom,self.lang_code)\n  \n  await self.map.render()\n  \n def get_sensor_on_complete(self,req,document_id):\n  summary_data=js.JSON.parse(req.text)\n  \n  aio.run(self.map.update(document_id,summary_data))\n  \n  \n def get_sensor_data(self,url,params,document_id):\n  print(\"get data:\",document_id)\n  headers={\"Authorization\":f\"Bearer {self.token}\"}\n  ajax.get(\n  url,\n  headers=headers,\n  data=params,\n  oncomplete=lambda req:self.get_sensor_on_complete(req,document_id),\n  )\n  \n def add_interpolation_summary(self,url,source,sensor_type,key):\n  def interpolation_summary_on_complete(req):\n   self.map.set_shape_with_key(js.JSON.parse(req.text),key)\n   \n  headers={\"Authorization\":f\"Bearer {self.token}\"}\n  \n  params=dict(\n  source=source,\n  sensor_type=sensor_type,\n  coordinate1=f\"{self.system_setting['interpolation_coordinate_1']['coordinates'][1]},{self.system_setting['interpolation_coordinate_1']['coordinates'][0]}\",\n  coordinate2=f\"{self.system_setting['interpolation_coordinate_2']['coordinates'][1]},{self.system_setting['interpolation_coordinate_2']['coordinates'][0]}\",\n  )\n  \n  ajax.get(\n  url,\n  headers=headers,\n  data=params,\n  oncomplete=interpolation_summary_on_complete,\n  )\n  \n def remove_interpolation_summary_layer(self,shape_key):\n  self.map.map.removeLayer(self.map.shapes[shape_key])\n  \n def get_current_data(self,document_id):\n  params=dict()\n  \n  url=\"\"\n  if \"hotspots\"in document_id:\n   params=dict(\n   satellite=\"modis\",\n   source=\"firms\",\n   )\n   if document_id ==\"viir_hotspots\":\n    params[\"satellite\"]=\"noaa-20\"\n   url=self.get_latest_hotspot_url\n  elif \"airport\"in document_id:\n   url=self.get_station_latest_climate_url\n   params[\"source\"]=\"port-api\"\n   \n  self.get_sensor_data(url,params,document_id)\n  \n def on_interpolation_clicked(self,ev):\n  if \"grey\"in ev.target.class_name:\n  \n   ev.target.class_name=ev.target.class_name.replace(\"grey\",\"green\")\n   get_url=f\"{self.get_kriging_summary_url}\"\n   self.add_interpolation_summary(\n   get_url,\"air4thai\",\"PM_2_5\",\"dust_interpolation\"\n   )\n  else :\n   ev.target.class_name=ev.target.class_name.replace(\"green\",\"grey\")\n   self.remove_interpolation_summary_layer(\"dust_interpolation\")\n   \n def on_filter_clicked(self,ev):\n  if \"grey\"in ev.target.class_name:\n  \n   ev.target.class_name=ev.target.class_name.replace(\"grey\",\"green\")\n   if ev.target.id not in self.map.markers_layer:\n    self.get_current_data(ev.target.id)\n   self.map.set_all_sensor_marker(ev.target.id)\n  else :\n   ev.target.class_name=ev.target.class_name.replace(\"green\",\"grey\")\n   self.map.remove_all_sensor_marker(ev.target.id)\n   \n def on_search_clicked(self,ev):\n  self.started_datetime=document[\"started_datetime\"].value\n  self.ended_datetime=document[\"ended_datetime\"].value\n  if \"green\"in document[\"airport\"].class_name:\n   params={}\n   get_hotspots_url=f\"{self.get_weather_station_lasted_url}\"\n   self.get_sensor_data(get_hotspots_url,params,\"airport\")\n   \n  if \"green\"in document[\"viir_hotspots\"].class_name:\n   params={}\n   get_hotspots_url=f\"{self.get_hotspots_url}/?started_datetime={self.started_datetime}&ended_datetime={self.ended_datetime}&satellite=noaa-20\"\n   self.get_sensor_data(get_hotspots_url,params,\"viir_hotspots\")\n   \n  if \"green\"in document[\"modis_hotspots\"].class_name:\n   params={}\n   get_hotspots_url=f\"{self.get_hotspots_url}/?started_datetime={self.started_datetime}&ended_datetime={self.ended_datetime}&satellite=modis\"\n   self.get_sensor_data(get_hotspots_url,params,\"modis_hotspots\")\n   \n def start(self):\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  aio.run(self.monitor())\n", ["browser", "datetime", "javascript", "maps", "stations"]]}
__BRYTHON__.update_VFS(scripts)
